# sharding-jdbc 水平分库分表策略
# 配置数据源，给数据源起别名
# 水平分库需要配置多个数据库
spring.shardingsphere.datasource.names=m1,m2
# 一个实体类对应两张表，覆盖
# 配置第一个数据源的具体内容，包含连接池，驱动，地址，用户名，密码
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/sharing?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/sharding2?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=123456




# 定义逻辑表course表与 真实表 course_。。 的映射关系 m1.course_1 和 m1.course_2
spring.shardingsphere.sharding.tables.course.actual-data-nodes=m$->{1..2}.course_$->{1..2}
#定义生成主键
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
# 定义主键生成算法 雪花算法
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.course.key-generator.props.workder.id=1
# 定义分片策略
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
# 定义分片表达式，cid为偶数放到course_1,cid为奇数放到course_2 中\
# inline 不支持范围查询
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_${cid%2+1}

#spring.shardingsphere.sharding.tables.course.table-strategy.standard.sharding-column=cid
# 范围
#spring.shardingsphere.sharding.tables.course.table-strategy.standard.range-algorithm-class-name=com.xb.shardingspheredemo.algorithm.RangeTableShardingAlgorithm
# 精确
#spring.shardingsphere.sharding.tables.course.table-strategy.standard.precise-algorithm-class-name=com.xb.shardingspheredemo.algorithm.PreciseTableShardingAlgorithm

# 定义分库策略
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=m$->{cid%2+1}
spring.shardingsphere.sharding.tables.course.database-strategy.standard.sharding-column=cid
spring.shardingsphere.sharding.tables.course.database-strategy.standard.precise-algorithm-class-name=com.xb.shardingspheredemo.algorithm.PreciseDataSourceShardingAlgorithm
spring.shardingsphere.sharding.tables.course.database-strategy.standard.range-algorithm-class-name=com.xb.shardingspheredemo.algorithm.RangeDataSourceShardingAlgorithm


# 定义复杂的分片策略
#spring.shardingsphere.sharding.tables.course.table-strategy.complex.sharding-columns=cid,user_id
#spring.shardingsphere.sharding.tables.course.table-strategy.complex.algorithm-class-name=com.xb.shardingspheredemo.algorithm.ComplexTableShardingAlgorithm

# hint
spring.shardingsphere.sharding.tables.course.table-strategy.hint.algorithm-class-name=com.xb.shardingspheredemo.algorithm.HintTableShardingAlgorithm


# 广播表
spring.shardingsphere.sharding.broadcast-tables=t_dict
spring.shardingsphere.sharding.tables.t_dict.key-generator.column=dict_id
spring.shardingsphere.sharding.tables.t_dict.key-generator.type=SNOWFLAKE

spring.shardingsphere.props.sql.show=true
spring.main.allow-bean-definition-overriding=true
