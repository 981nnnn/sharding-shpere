#spring.shardingsphere.datasource.names=ds1,ds2
#
#spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.ds1.url=jdbc:mysql://192.168.239.128:3307/mall?serverTimezone=UTC
#spring.shardingsphere.datasource.ds1.username=root
#spring.shardingsphere.datasource.ds1.password=root
#
#spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.ds2.url=jdbc:mysql://192.168.239.128:3308/mall_1?serverTimezone=UTC
#spring.shardingsphere.datasource.ds2.username=root
#spring.shardingsphere.datasource.ds2.password=root





##指定数据库的分布情况
#spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{1..2}.t_orders_$->{1..2}
#
#spring.shardingsphere.sharding.tables.t_order.key-generator.column=id
#spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
#
##指定库分片策略，根据customer_id的奇偶添加到不同的库中
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=customer_id
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ds$->{customer_id % 2 + 1 }
#
##指定表分片策略，根据id的奇偶来添加到不同的数据库表
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_orders_$->{id % 2 + 1}

#----------------------------- 垂直分库 -------------------------
# 垂直分库，在不同的数据节点。在ds1 上创建 t_dict 表。在 ds2 上创建course表

#spring.shardingsphere.sharding.tables.t_dict.actual-data-nodes=ds1.t_dict_$->{1..2}
#
#spring.shardingsphere.sharding.tables.t_dict.key-generator.column=dict_id
#spring.shardingsphere.sharding.tables.t_dict.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.t_dict.table-strategy.inline.sharding-column=dict_id
#spring.shardingsphere.sharding.tables.t_dict.table-strategy.inline.algorithm-expression=t_dict_$->{dict_id % 2 + 1}
#
#
#spring.shardingsphere.sharding.tables.course.actual-data-nodes=ds2.course_$->{1..2}
#spring.shardingsphere.sharding.tables.course.key-generator.column=cid
#spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{ cid % 2 + 1}

#-------------------------公共表 -------------------------------------------
#spring.shardingsphere.sharding.broadcast-tables=t_dict
#spring.shardingsphere.sharding.tables.t_dict.key-generator.column=dict_id
#spring.shardingsphere.sharding.tables.t_dict.key-generator.type=SNOWFLAKE


# -------------读写分离 --------------


spring.shardingsphere.datasource.names=ms,s1

# master 写数据
spring.shardingsphere.datasource.ms.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ms.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ms.url=jdbc:mysql://192.168.239.128:3307/mall?serverTimezone=UTC
spring.shardingsphere.datasource.ms.username=root
spring.shardingsphere.datasource.ms.password=root
#slave 读数据
spring.shardingsphere.datasource.s1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.s1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.s1.url=jdbc:mysql://192.168.239.128:3308/mall?serverTimezone=UTC
spring.shardingsphere.datasource.s1.username=root
spring.shardingsphere.datasource.s1.password=root

spring.shardingsphere.masterslave.name=ms
spring.shardingsphere.masterslave.master-data-source-name=ms
spring.shardingsphere.masterslave.slave-data-source-names=s1





spring.shardingsphere.props.sql.show=true
spring.main.allow-bean-definition-overriding=true

